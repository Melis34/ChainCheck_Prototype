class ReentrancyChecker:
    def __init__(self, functions):
        self.functions = functions

    def detect_after_summary(self, vulnerabilities):
        """
        This function is called after all other detections.
        It prints all vulnerabilities and counts them by type.
        It also returns a summary of the vulnerabilities.
        """
        print("Running after reentrancy check...")

        # Initialize a dictionary to store the count of vulnerabilities by type
        vulnerability_types = {
            "Critical": 0,
            "High": 0,
            "Normal": 0,
            "Low": 0,
            "Informational": 0,
            "Unknown": 0
        }

        # Color formatting for vulnerability types
        color_map = {
            "Critical": "\033[35m",  # Magenta for Critical
            "High": "\033[31m",      # Red for High
            "Normal": "\033[33m",    # Yellow for Normal
            "Low": "\033[34m",       # Blue for Low
            "Informational": "\033[0m",  # Default color for Informational
            "Unknown": "\033[0m"     # Default color for Unknown
        }

        # Print all vulnerabilities and count them by type
        for vuln in vulnerabilities:
            for issue in vuln['issues']:
                issue_type = issue.get("type", "Unknown")
                description = issue.get("description", "No description")
                color = color_map.get(issue_type, "\033[0m")  # Default color for unknown types
                # print(f"  - {color}[{issue_type}] {description}\033[0m")

                # Update the count of the vulnerability type
                if issue_type in vulnerability_types:
                    vulnerability_types[issue_type] += 1
                else:
                    vulnerability_types["Unknown"] += 1

        # Print the counts of each vulnerability type with color
        print("\nVulnerabilities by type:")
        for issue_type, count in vulnerability_types.items():
            color = color_map.get(issue_type, "\033[0m")  # Default color for unknown types
            print(f"{color}{issue_type}: {count}\033[0m")
        print("")

        # Return a summary
        return [f"Vulnerabilities summary: {sum(vulnerability_types.values())} vulnerabilities found."]
