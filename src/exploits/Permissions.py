from findnode import *
"""
Checks for publicly callable functions
triggers informational vulnerability when found
"""




class PermissionChecker:
    def __init__(self, functions):
        
        """
        Initializes the ReentrancyChecker with a list of functions to analyze.
        :param functions: List of function definitions (extracted from the AST).
        """
        
        self.functions = functions

    def _analyze_function(self, func):
        """
        Analyzes a function's body for potential reentrancy vulnerabilities.
        :param func: A function node from the AST
        :return: List of reentrancy issues found in the function
        """
        issues = []
        if func.get("visibility"):
                issues.append({"type": "Informational", "description": f"Function is set to {func.get("visibility")}"})
        return issues

    def detect_permissions(self):
        """
        Detects potential reentrancy vulnerabilities in the list of functions provided.
        :return: List of detected vulnerabilities (if any)
        """
        if not self.functions:
            print("No functions provided. Exiting.")
            return []

        # Analyze each function
        vulnerabilities = []
        for func in self.functions:
            func_name = func.get("name", "Unnamed Function")
            print("\033[100manalyzing function:" +"\033[0m" +" '" + func_name +"' for permissions ")
            issues = self._analyze_function(func)
            if issues:
                vulnerabilities.append({
                    "function": func_name,
                    "issues": issues
                })

        return vulnerabilities
